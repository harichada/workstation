#!/bin/ksh  

###############################################################################
#
# Name       jobControl.ksh
# Author     Percy M. Wegmann
# Created    04/27/2004
#
# This script serves as the central entry-point into all CCSAS-CSE
# Batch Jobs running within a J2EE Client Container.  It is a wrapper that performs these main functions:
# 
#   1. Validate input parameters
#   2. Register signal listener for SIGTERM signal
#   3. Execute the BatchLauncher Java program
#   4. If SIGTERM is received, send a SIGINT to BatchLauncher to request
#      shutdown
# 
# The script accepts the following parameters:
# 
#   jobControl.ksh <action> <param1>=<value1> <param2>=<value2> etc ...
#
# The only currently supported <action> is "run".
# 
# Any number of param=value pairs are accepted (including 0).
# 
# The script also expects to find an environment variable named $UNISON_JOB
# and providing information about the current Job in the below format:
# 
#   WorkstationName#StreamName.JobName
# 
# In addition, the script expects to find a variable named $SCHEDULE_DATE
# that gives the Schedule (a.k.a Business) date, in the format:
#
#   yyyymmdd
# 
# A new variable REMOTE_EXECUTION controls whether TaskStep's run within the
# WebSphere Application Aerver container or within the external J2EE Application
# Client runtime. Values are:
#     true - Run within a WebSphere Application Server container.
#     false - Run within an external WebSphere J2EE Application Client runtime.
#
# The correct folder structure is:
#
# BATCH_ROOT
#    /configuration
#        /<job_name>
#            <job_name>.script (required Job definition file)
#            setEnv.ksh (optional job-specific environment setup script)
#
# The Script will return one of the below exit codes when exiting:
#
# CODE     MEANING
# ----     -------
# 0        Job ran successfully
# 1        No action specified
# 2        Job configuration folder not found
# 3        Job definition not found
# 10-30    Batch architecture errors
# 31-99    Custom errors
#
# --------------------------- Revisions ------------------------------------
# VERSION  AUTHOR              DATE        CHANGES
# 0.1      Percy M. Wegmann    04/27/2004  Created Script
# 0.2      Percy M. Wegmann    05/17/2004  Incorporated changes from Code Review
# 0.3      Percy M. Wegmann    07/01/2004  Added cygwin support
# 0.4      Ryan Livesey        10/15/2004  Commented out Cygwin support and prepared script for UIT
# 1.0      Kerry O'Brien       04/09/2005  Created to support launching a java client
#                                          within a J2EE Application Client Container.
# 1.1      Kerry O'Brien       04/11/2005  Templatized to allow the script to know
#                                          it's own directory structures.
# 1.2      Kerry O'Brien       05/11/2005  Removed references to the old BATCH_TEMP 
#                                          and BATCH_ROOT variables. These are now
#                                          configured during environment creation.
# 1.3      Kerry O'Brien       08/18/2005  Removed the bootstrap and host now that
#                                          configuration files correctly use the
#                                          provider urls for the initial context.
# 2.1.3    Kerry O'Brien       07/26/2007  Add new property to make sure that we  
#                                          don't bootstrap codestables, in the  
#                                          client JVM when running in-container. 
# 2.1.3    Kerry O'Brien       07/27/2007  Removed the minimum heap size for in   
#                                          container usage as it reduces the    
#                                          process size by about 8-10 mb. Reducing
#                                          the -Xmx setting any lower does not
#                                          reduce the process size any more.
# 3.4.0	   Kevin Babcock       10-13-2009  Updated logic to use a new 
#                                          FMSBatchEventListener when executing
#                                          FMS batch jobs.
# 3.4.1    Kerry O'Brien       12-14-2009  WAS 6.1 Support
#          1. Add the CLIENT_CLAUNCHER_SCRIPT var to support launching a 
#             WAS 6.1 script.
#          2. Add the  ant-config parameter which allows the
#             CM team to control the WAS version at deployment time. By default
#             a WAS 5.1 server will be targeted.
#          3. A "repo" symlink must be present in the batch root directory. The
#             link points to the root of the Jar Repository.
# 3.4.2    Kapil Patlola        09/11/2012    Removed the  and added the Tokens
#                                             WAS_HOME="/usr/WebSphere/AppServer_85" and JMS_PATH="/usr/WebSphere/AppServer_85/installedConnectors/wmq.jmsra.rar/com.ibm.mq.jar:/usr/WebSphere/AppServer_85/installedConnectors/wmq.jmsra.rar/com.ibm.mqjms.jar:/usr/WebSphere/AppServer_85/installedConnectors/wmq.jmsra.rar/dhbcore.jar which allows 
#                                             CM team to control these Tokens during deploy time.
###############################################################################

#!/bin/ksh

# Provide the environment variable.
export BATCH_ROOT=/cse/batch/SYA01_Batch

# change directory to batch root
cd ${BATCH_ROOT}

# Provide a default Ear filename from which to execute but allow the users to override.		      
if [[ -z "${EAR_FILE_NAME}" ]] then
   EAR_FILE_NAME=SYA01_Batch.ear
fi

export EAR_FILE_NAME
export EAR_PATH=${BATCH_ROOT}/${EAR_FILE_NAME}

# Default is to launch the WebSphere launch client script.
CLIENT_CLAUNCHER_SCRIPT="${BATCH_ROOT}/launchClient.sh"

# Default the environment to remote execution.
# The default for remote execution is true.
if [[ $REMOTE_EXECUTION = "true" || $REMOTE_EXECUTION = "" ]]; then
   export REMOTE_EXECUTION="true"
   export HEAP_SIZES="-Xmx75m"   
   SKIP_CODE_TABLE_BOOTSTRAP="true"
else
   export REMOTE_EXECUTION="false"
   export HEAP_SIZES="-Xms128m -Xmx320m"
   SKIP_CODE_TABLE_BOOTSTRAP="false"
fi;

###############################################################################
# Configure to run a specific version of WebSphere. Is no override variable 
# is provided.
###############################################################################
WAS_HOME="/usr/WebSphere/AppServer_85"
JMS_PATH="/usr/WebSphere/AppServer_85/installedConnectors/wmq.jmsra.rar/com.ibm.mq.jar:/usr/WebSphere/AppServer_85/installedConnectors/wmq.jmsra.rar/com.ibm.mqjms.jar:/usr/WebSphere/AppServer_85/installedConnectors/wmq.jmsra.rar/dhbcore.jar"


SET_ENV_SCRIPT="${BATCH_ROOT}/setEnv.ksh"

# Validate and invoke the setEnv script.
if [ -r "${SET_ENV_SCRIPT}" ];
then
	. ${SET_ENV_SCRIPT}
else
    echo "Environment initialization script ${SET_ENV_SCRIPT} not found."
    exit 5
fi;

# Initialize DB2
. "${DB2_HOME}/db2profile"

JOB_CONFIG_FOLDER="${BATCH_ROOT}/resources/job_configuration/"

# Initialize variables
rightHandUnisonJob=''
jobName=''
streamName=''
hostName=''
scheduleDate=''
target=''
antpid=''
jobEnvironmentScript=''
jobdef=''
compoundJobParameters=''
listener=''
exitCode=0

# declare function for displaying usage syntax
function usage
{
    echo ""
    echo "Please use the below syntax when running this script: "
    echo ""
    echo "   jobControl.ksh [action] [param1]=[value1] [param2]=[value2] etc ..."
    echo ""
    echo "Also, make sure that the UNISON_JOB, SCHEDULE_DATE"
    echo "parameters are set. The BATCH_ROOT variables points  at the base folder "
    echo "of the batch directory structure."
}

# declare function for handling TERM signal
function got_sigterm
{
    echo "Got SIGTERM.  Attempting to shut down job cleanly"
    kill -2 $antpid
}

# Register signal listener
trap got_sigterm TERM

# Initialize parameter counter to 1
counter=1

# Iterate through all parameters and extract the necessary values
for var in $* ;
do
    if [ $counter -eq 1 ]; then
        echo "Setting target to \"${var}\""
        target="${var}"
    fi

    if [ $counter -gt 1 ]; then
        echo "Appending \"${var}\" to list of parameters"
        compoundJobParameters="${compoundJobParameters}${var}&"
    fi

    counter=`expr ${counter} + 1`
done

# Check to make sure that at least an action has been specified
if [ $counter -lt 2 ]; then
    echo "Must specify an action"
    usage
    exit 1
fi

# Extract HostName, StreamName and JobName from UNISON_JOB variable
hostName=`echo "${UNISON_JOB}" | cut -d "#" -f 1`
rightHandUnisonJob=`echo "${UNISON_JOB}" | cut -d "#" -f 2`
streamName=`echo "${rightHandUnisonJob}" | cut -d "." -f 1`
jobName=`echo "${rightHandUnisonJob}" | cut -d "." -f 2`

# Set Business Date to SCHEDULE_DATE, if set, otherwise set value
# to the UNISON_SCHED_DATE  plus "000000" for hours/minutes/seconds.
# SCHEDULE_DATE is set by in the definition of the job and is equal to
# the date value stored in the ^TODAY^ parameter for TWS.  If the job
# is being run from the command line or the job has been setup incorrectly,
# assume the UNISON_SCHED_DATE is accurate.
# NOTE: time component cannot be set to a value because the job may not
# executing on the original day it was scheduled to run.  Concatenating
# the current time with the date the job should execute (or any time of
# day for that matter) does not make sense.
if [[ ! -z ${SCHEDULE_DATE} ]];then
  print "scheduleDate set to ${SCHEDULE_DATE} using SCHEDULE_DATE\n"
else
  export SCHEDULE_DATE="${UNISON_SCHED_DATE}"
  print "scheduleDate set to ${SCHEDULE_DATE} using UNISON_SCHED_DATE\n"
fi
scheduleDate="${SCHEDULE_DATE}_000000"

# Prepend HostName, StreamName, JobName and Business Date to list of Job Parameters
compoundJobParameters="HostName=${hostName}&StreamName=${streamName}&JobName=${jobName}&ScheduleDate=${scheduleDate}&${compoundJobParameters}"

# Check for existence of Job Folder
if [ -r "${JOB_CONFIG_FOLDER}/${jobName}" ];
then
    echo "Found job folder"
else
    echo "Job config folder ${JOB_CONFIG_FOLDER}/${jobName} not found."
    usage
    exit 2
fi;

# Check for presence of executable job-specific environment settings
jobEnvironmentScript="${JOB_CONFIG_FOLDER}/${jobName}/setEnv.ksh"
if [ -x "${jobEnvironmentScript}" ]; then
    echo "Setting job-specific environment settings"
    . "${jobEnvironmentScript}"
fi

export ANT_OPTS="-DJOB_NAME=${jobName} ${ANT_OPTS}"
export ANT_OPTS="-DSTREAM_NAME=${streamName} ${ANT_OPTS}"
export ANT_OPTS="-DHOST_NAME=${hostName} ${ANT_OPTS}"
export ANT_OPTS="-DSCHEDULE_DATE=${scheduleDate} ${ANT_OPTS}"

export STREAM_NAME=${streamName}

# Determine which Listner to use for the batch job
if (( $(echo ${jobName} | grep -v 'ARC-551-FM01' | grep -c '\-FM[0-9][0-9]$') > 0 ))
then
        listener=gov.ca.dcss.arch.batch.job.ant.FMSBatchEventListener
else
        listener=gov.ca.dcss.arch.batch.job.ant.BatchEventListener
fi


# Check for existence of readable Job Definition and execute project
jobdef="${JOB_CONFIG_FOLDER}/${jobName}/${jobName}-script.xml"
if [ -r ${jobdef} ];
then
    echo "Found Job definition"

    # Add user supplied J2EE Application Client JVM settings.
    export USER_INSTALL_PROP="${HEAP_SIZES}"

    export CLIENT_OPTS="${EAR_PATH}"
    export CLIENT_OPTS="${CLIENT_OPTS} -CCDRemoteTaskExecution=${REMOTE_EXECUTION}"
    
    export CLIENT_OPTS="${CLIENT_OPTS} -CCproviderURL=${PROVIDER_URL}"
    
    export CLIENT_OPTS="${CLIENT_OPTS} -Dcom.ibm.websphere.client.applicationclient.archivedir=${BATCH_ROOT}"
    export CLIENT_OPTS="${CLIENT_OPTS} -CCverbose=true"
    export CLIENT_OPTS="${CLIENT_OPTS} -DBATCH_ROOT=${BATCH_ROOT}"
    export CLIENT_OPTS="${CLIENT_OPTS} -listener ${listener}"
    export CLIENT_OPTS="${CLIENT_OPTS} -DBATCH_RESOURCES=${BATCH_ROOT}/resources/"
    export CLIENT_OPTS="${CLIENT_OPTS} -Dbatch.exitCode=0"
    export CLIENT_OPTS="${CLIENT_OPTS} -DBATCH_TEMP=${BATCH_ROOT}/temp/"
    export CLIENT_OPTS="${CLIENT_OPTS} -buildfile ${jobdef}"
    export CLIENT_OPTS="${CLIENT_OPTS} -DJobParameters=${compoundJobParameters}"
    export CLIENT_OPTS="${CLIENT_OPTS} -CCDSkipCodeTableBootstrap=${SKIP_CODE_TABLE_BOOTSTRAP}"

    if [[ $CLASSPATH == "" ]]; then
        echo "No -classpath option added."
    else
        export CLIENT_OPTS="${CLIENT_OPTS} -CCclasspath=$CLASSPATH"
    fi;

    ${BATCH_ROOT}/launchClient.sh ${CLIENT_OPTS} &
    
    antpid=$!
    wait ${antpid}

    exit $?
else
    echo "File ${jobdef} not found."
    usage
    exit 3
fi
